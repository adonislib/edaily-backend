## Query
#
type Organization {
  uuid: ID
  fingerprint: String
  definition: String
  name: String
  initials: String
  cnpj: String
  billing_email: String
  phone1: String
  phone2: String
  zipcode: String
  street: String
  street_number: String
  neighborhood: String
  city: String
  state: String
  terms_accepted: Boolean
  users: [User]
  author: User
  revisor: User
}

type OrganizationPaginated {
  total: Int
  perPage: Int
  page: Int
  lastPage: Int
  data: [Organization]
}

type Query {
  organizations(uuid: ID, page: Int, limit: Int): OrganizationPaginated
}

## Mutation
#
input OrganizationInput {
  fingerprint: String
  definition: String!
  name: String!
  initials: String!
  cnpj: String!
  billing_email: String!
  phone1: String!
  phone2: String
  zipcode: String!
  street: String!
  street_number: String!
  neighborhood: String!
  city: String!
  state: String!
  terms_accepted: Boolean!
}

type Mutation {
  addOrganizationWithResponsibleAndSubstitute(
    organization: OrganizationInput!,
    responsible: UserInput!,
    substitute: UserInput
  ): Organization
}
