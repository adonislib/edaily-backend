type Document {
  uuid: ID
  protocol: String
  file: File
  pages: [String]
  author: Author
  reviser: Author
  responsable: Author
  organization: Organization
  cancellation: Cancellation
  forwarding: Forwarding
  publication: Publication
  updatedAt: String
  createdAt: String
}

type Author {
  uuid: ID
  firstname: String
  lastname: String
  email: String
}

type Cancellation {
  author: Author
  canceledAt: String
}

type Publication {
  author: Author
  publishedAt: String
}

type Forwarding {
  author: Author
  forwardedAt: String
}

input DocumentFieldsInput {
  uuid: ID
}

type DocumentResultSuccess {
  total: Int
  perPage: Int
  page: Int
  lastPage: Int
  data: [Document]
}

type Query {
  getAllDocuments(
    organization: OrganizationFieldsInput
    user: UserFieldsInput
    page: Int
    perPage: Int
  ): DocumentResultSuccess

  getDocument(
    organization: OrganizationFieldsInput
    document: DocumentFieldsInput
  ): Document

  documentsForAnalysis(
    page: Int
    perPage: Int
  ): DocumentResultSuccess

  sentDocuments(
    page: Int
    perPage: Int
  ): DocumentResultSuccess
}

## Mutation
#
# input AuthorInput {
#   firstname: String!
#   lastname: String!
#   email: String!
# }

# input DocumentInput {
#   reviser: UserInput
#   cancellation: CancellationInput
#   forwarding: ForwardingInput
#   publication: PublicationInput
# }

# input CancellationInput {
#   author: AuthorInput!
#   canceledAt: String!
# }

# input PublicationInput {
#   author: AuthorInput!
#   publishedAt: String!
# }

# input ForwardingInput {
#   author: AuthorInput!
#   forwardedAt: String!
# }

type Mutation {
  sendDocument(
    organization: OrganizationFieldsInput!,
    document: DocumentFieldsInput!
  ): Document
}
