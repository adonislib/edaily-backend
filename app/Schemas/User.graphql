## Query
#
type User {
  uuid: ID
  firstname: String
  lastname: String
  email: String
  cpf: String
  rg: String
  phone: String
  zipcode: String
  street: String
  street_number: String
  neighborhood: String
  city: String
  state: String
  is_responsible: String
  is_active: String
  confirmed_at: String
  sign_in_count: String
  last_sign_in_at: String
  current_sign_in_at: String
  last_sign_in_ip_address: String
  current_sign_in_ip_address: String
  organization: Organization
  avatar: File
}

type File {
  uuid: ID
  file: String
  name: String
  type: String
  subtype: String
  url: String
}

input UserFieldsInput {
  uuid: ID
}

type UserResultSuccess {
  total: Int
  perPage: Int
  page: Int
  lastPage: Int
  data: [User]
}

type Query {
  users(
    organization: OrganizationFieldsInput,
    user: UserFieldsInput,
    page: Int,
    perPage: Int
  ): UserResultSuccess
}

## Mutation
#
input UserInput {
  firstname: String!
  lastname: String!
  email: String!
  cpf: String!
  rg: String!
  phone: String!
  zipcode: String!
  street: String!
  street_number: String!
  neighborhood: String!
  city: String!
  state: String!
  is_responsible: Boolean
  is_active: Boolean
  avatar_id: String
}

input PasswordInput {
  old: String!
  new: String!
  confirmation: String!
}

input AvatarInput {
  uuid: ID
}

input ProfileInput {
  firstname: String!
  lastname: String!
  phone: String
}

input FileInput {
  file: String
  name: String
  type: String
  subtype: String
}

type Mutation {
  addUser(
    organization: OrganizationFieldsInput!,
    user: UserInput!
  ): User

  updateUser(
    organization: OrganizationFieldsInput!,
    user: UserFieldsInput!,
    data: UserInput!
  ): User

  updateAvatar(
    avatar: AvatarInput!
  ): Boolean

  updatePassword(
    password: PasswordInput!
  ): Boolean

  updateProfile(
    profile: ProfileInput!
  ): User
}
